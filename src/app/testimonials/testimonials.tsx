"use client" // If using the Next.js app directory
import React, { useEffect, useRef, useState } from "react"
import Slider from "react-slick"
import "slick-carousel/slick/slick.css"
import "slick-carousel/slick/slick-theme.css"
import styles from "./testimonials.module.css" // Optional custom styling
import { faChevronRight,faChevronLeft } from "@fortawesome/free-solid-svg-icons"
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome"

const carouselItems = [
  {
    id: 1,
    quote:
      "“I found TERES to be comparable to international hearing platforms that I have used (and it was most cost effective). I would certainly recommend TERES.",
    name: "Dr. Matthew Secomb",
    designation: "Partner",
    firm: " White & Case",
    rating: 5
  },
  {
    id: 2,
    quote:
      "“I have seen [the TERES] product improve significantly, and it is now close to what I have come to expect internationally from existing transcription providers. The game changing impact of the TERES product is that it comes at a small fraction of the cost of other service providers.",
    name: "Prof. Doug Jones",
    designation: "Chartered Arbitrator",
    firm: "Atkin Chambers",
    rating: 5
  },
  {
    id: 3,
    quote:
      "“Our recent experience with [TERES] left me impressed. The hearing bundles were neatly done.The platform was easy to understand and efficient to use. The transcription services were excellent.",
    name: "Anuradha Agnihotri",
    designation: "Partner",
    firm: "Trilegal",
    rating: 5
  },
  {
    id: 4,
    quote:
      "“I have myself used [transcripts generated by TERES] while crafting judgments to better understand the nuances of argument. When future generations interpret our judgment these transcripts will show what shaped our mind to write these judgments. This transparency (not only) makes our institution more accountable, but it enhanced the quality of our jurisprudence",
    name: "Justice D.Y. Chandrachud",
    designation: "Former Chief Justice",
    firm: "Supreme Court of India",
    rating: 5
  },
  {
    id: 5,
    quote:
      "“I recently utilised TERES for real-time transcription during an international arbitration. I was thoroughly impressed. The transcription service was highly effective and delivered accurate transcriptions promptly. The TERES team is pleasant, highly professional and they ensured a seamless experience throughout the proceedings. I would  recommend TERES to all my clients for their excellent transcription services and quick turnaround times",
    name: "Abhinav Bhushan",
    designation: "Director (Foreign Law)",
    firm: "Drew & Napier, Singapore",
    rating: 5
  },
]

const Carousel: React.FC = () => {
  const [highlightedIndex, setHighlightedIndex] = useState<number>(1); // Default to first item
  const sliderRef = useRef<Slider | null>(null); // Properly type the slider reference
  const intervalId = useRef<NodeJS.Timeout | null>(null); // Use useRef for intervalId

  useEffect(() => {
    if (sliderRef.current) {
      sliderRef.current.slickGoTo(0); // Start with the first slide
    }
    return () => {
      // Cleanup interval on unmount
      if (intervalId.current) {
        clearInterval(intervalId.current);
      }
    };
  }, []);

  const settings = {
    dots: false,
    infinite: true,
    speed: 600,
    slidesToShow: 3,
    slidesToScroll: 1,
    arrows: false,
    cssEase: "linear",
    adaptiveHeight: true,
    initialSlide: 0,
    responsive: [
      {
        breakpoint: 1424,
        settings: {
          slidesToShow: 3,
          slidesToScroll: 1,
          infinite: true,
        },
      },
      {
        breakpoint: 760,
        settings: {
          slidesToShow: 2,
          slidesToScroll: 1,
        },
      },
      {
        breakpoint: 560,
        settings: {
          slidesToShow: 1,
          slidesToScroll: 1,
        },
      },
    ],
  };

  const handleHover = (index: number) => {
    setHighlightedIndex(index);
  };

  const handleAutoSlide = (slideType: string) => {
    const itemsCount = carouselItems.length
    let index = highlightedIndex

    intervalId.current = setInterval(() => {
      if (sliderRef.current) {
        index = (index + 1) % itemsCount
       slideType == "next" && sliderRef.current.slickNext();
        slideType == "prev" && sliderRef.current.slickPrev()

        setHighlightedIndex(index)
      }
    }, 3000) // Change slides every 3 seconds
  }

  const stopAutoSlide = () => {
    if (intervalId.current) {
      clearInterval(intervalId.current);
    }
  };

  // console.log("Hightlighted",highlightedIndex)
  return (
    <div className={styles.mainDiv}>
      <div
        className={styles.leftHover}
        // onMouseEnter={() => {
        //   stopAutoSlide()
        //   sliderRef?.current?.slickPrev()
        //   handleAutoSlide("prev")
        // }}
        // onMouseLeave={stopAutoSlide}
      >
        <FontAwesomeIcon icon={faChevronLeft} className={styles.CarouselIcon} />
        
      </div>
      <div className={styles.carouselContainer}>
        <Slider ref={sliderRef} {...settings}>
          {carouselItems.map((item, index) => (
            <div
              key={index}
              className={`${styles.panel} ${highlightedIndex === index-1 ? styles.highlighted : ""}`}
            //   onMouseEnter={() => handleHover(index)}
            >
              {/* <div className={styles.rating}>{renderStars(item.rating)}</div> */}
              <p>{item.quote}</p>
              <div className={styles.profile}>
                <p className={styles.name}>{item.name}</p>
                <p>{item.designation}</p>
                <p>{item.firm}</p>
              </div>
            </div>
          ))}
        </Slider>
      </div>
      <div
        className={styles.rightHover}
        onMouseEnter={() => {
          stopAutoSlide()
          sliderRef?.current?.slickNext()
          handleAutoSlide("next")
        }}
        // onMouseLeave={stopAutoSlide}
      >
        <FontAwesomeIcon icon={faChevronRight} className={styles.CarouselIcon} />

        
      </div>
    </div>
  )
};

export default Carousel;


